# colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
# colors <-  viridis(100)[cut(data$age, breaks = 100)]
data_predicted <- data.frame(new_data$charges, predicted, new_data$smoker_yes, new_data$obese)
print(head(data_predicted))
# Definir cores com base na variável obese
colors <- ifelse(data_predicted$data.obese == "0", "blue", "red")
ggplot(data_predicted, aes(x = new_data.charges, y = predicted, color = factor(new_data.smoker_yes), shape = factor(new_data.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
#-------------- SUBNIVEL REGRESSION --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = new_data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value))
# Obter os valores preditos
predicted <- predict(model, new_data)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(new-data$charges, predicted,new_data$smoker_yes, new_data$obese)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(new_data$charges, predicted,new_data$smoker_yes, new_data$obese)
# print(head(data_predicted))
colors <- ifelse(data$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data.charges, y = predicted, color = factor(data.smoker_yes), shape = factor(data.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = new_data.charges, y = predicted, color = factor(new_data.smoker_yes), shape = factor(new_data.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcular os limites superior e inferior usando os quartis dos dados
limite_inferior <- quantile(data$charges, probs = 0.25) - 1.5 * IQR(data$charges)
limite_superior <- quantile(data$charges, probs = 0.75) + 1.5 * IQR(data$charges)
# Identificar outliers com base nos resíduos
outliers <- data$charges < limite_inferior | data$charges > limite_superior
# Remover outliers do conjunto de dados
new_data <- data[!outliers, ]
#-------------- SIMPLE REGRESSION --------------#
model <- lm(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest +
smoker_yes + obese, data = new_data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
# Obter os valores preditos
predicted <- predict(model, new_data)
# Definir cores
# colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
# colors <-  viridis(100)[cut(data$age, breaks = 100)]
data_predicted <- data.frame(new_data$charges, predicted, new_data$smoker_yes, new_data$obese)
print(head(data_predicted))
# Definir cores com base na variável obese
colors <- ifelse(data_predicted$data.obese == "0", "blue", "red")
ggplot(data_predicted, aes(x = new_data.charges, y = predicted, color = factor(new_data.smoker_yes), shape = factor(new_data.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Carregar os dados
data <- read.csv("C:\\Users\\Daniel\\OneDrive\\Área de Trabalho\\7período\\ME\\projeto_final\\insurance.csv")
print(head(data))
#-------------- TRANSFORM DATA --------------#
# Transform sex in binary
data$sex_male <- as.numeric(data$sex == "male")
data <- data[, -which(names(data) == "sex")] #remover coluna categórica
#Transform smoker in binary
data$smoker_yes <- as.numeric(data$smoker == "yes")
data <- data[, -which(names(data) == "smoker")] #remove coluna categórica
# Transformar a coluna 'region' em quatro colunas
region_dummies <- model.matrix(~region - 1, data = data)
colnames(region_dummies) <- c("northeast", "northwest", "southeast", "southwest")
data <- cbind(data, region_dummies)
data <- data[, -which(names(data) == "region")]#remover categórica
#  Add colunm binary for imc>30
data$obese <- ifelse(data$bmi >= 30, 1, 0)
#add colunm square_age
data$square_age <- (data$age)**2
data <- data[, -which(names(data) == "age")]#remover age
print(head(data))
data_fumantes <- subset(data, smoker_yes == 1)
data_nao_fumantes <- subset(data, smoker_yes == 0)
# Calcular os limites superior e inferior usando os quartis dos dados
limite_inferior <- quantile(data$charges, probs = 0.25) - 1.5 * IQR(data$charges)
limite_superior <- quantile(data$charges, probs = 0.75) + 1.5 * IQR(data$charges)
# Identificar outliers com base nos resíduos
outliers <- residuos < limite_inferior | residuos > limite_superior
# Remover outliers do conjunto de dados
data <- data[!outliers, ]
#-------------- SIMPLE REGRESSION --------------#
model <- lm(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest +
smoker_yes + obese, data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
# Obter os valores preditos
predicted <- predict(model, data)
# Definir cores
# colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
# colors <-  viridis(100)[cut(data$age, breaks = 100)]
data_predicted <- data.frame(data$charges, predicted, data$smoker_yes, data$obese)
# Definir cores com base na variável obese
colors <- ifelse(data_predicted$data.obese == "0", "blue", "red")
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
# Definir cores com base na variável obese
colors <- ifelse(data_predicted$data.obese == "0", "blue", "red")
# Converter variáveis para fatores no dataframe
data_predicted$data.smoker_yes <- factor(data_predicted$data.smoker_yes, levels = c(0, 1), labels = c("Não Fumante", "Fumante"))
data_predicted$data.obese <- factor(data_predicted$data.obese, levels = c(0, 1), labels = c("Não Obeso", "Obeso"))
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data.charges, y = predicted, color = data.smoker_yes, shape = data.obese)) +
geom_point(size = 3, aes(fill = data.obese)) +  # Adiciona pontos ao gráfico com fill baseado em data.obese
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red")) +  # Define cores para fumantes
scale_shape_manual(values = c(1, 16)) +  # Define formas para obesidade
guides(color = guide_legend(title = "Status de Fumante"),
shape = guide_legend(title = "Obesidade")) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 7000, y = 7000, label = "Reta x=y", color = "gray", hjust = 0, vjust = 0) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data.charges, y = predicted, color = factor(data.smoker_yes), shape = factor(data.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcular os resíduos
residuos <- residuals(model)
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
#-------------- SUBNIVEL REGRESSION --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
#-------------- SIMPLE REGRESSION --------------#
model <- lm(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest +
smoker_yes + obese, data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#-------------- SUBNIVEL REGRESSION --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value))
print(paste("R²:", r2_value[[1]]))
#-------------- SUBNIVEL REGRESSION --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
# Obter os valores preditos
predicted <- predict(model, data)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(data$charges, predicted,data$smoker_yes, data$obese)
# print(head(data_predicted))
colors <- ifelse(data$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data.charges, y = predicted, color = factor(data.smoker_yes), shape = factor(data.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcular os resíduos
residuos <- residuals(model)
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
print(coef(model))
print(coef(model))
#-------------- SUBNIVEL REGRESSION 2 --------------#
#aplly multinível regresson
model <- lmer(charges ~   (square_age | smoker_yes:obese) + (bmi | smoker_yes:obese) + (children | smoker_yes:obese) + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
print(paste("R²:", r2_value[[0]]))
print(paste("R²:", r2_value[[2]]))
print(paste("R²:", r2_value[[1]]))
r2_value <- r2(model)
print(paste(r2_value))
#-------------- SUBNIVEL REGRESSION 2 --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#-------------- SUBNIVEL REGRESSION 2 --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + children + sex_male   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#-------------- SUBNIVEL REGRESSION 2 --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + children + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#-------------- SUBNIVEL REGRESSION 2 --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
# Obter os valores preditos
predicted <- predict(model, data)
#-------------- SUBNIVEL REGRESSION  - NON OUTLIERS --------------#
data_no_smoker_no_outliers <- data %>%
group_by(smoker_yes) %>%
filter(!(smoker_yes == 0 & variavel_de_interesse < quantile(variavel_de_interesse, 0.25) - 1.5 * IQR(variavel_de_interesse) |
variavel_de_interesse > quantile(variavel_de_interesse, 0.75) + 1.5 * IQR(variavel_de_interesse)))
library(dplyr)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
install(dplyr)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
install.packages(dplyr)
#-------------- SUBNIVEL REGRESSION --------------#
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
#-------------- SUBNIVEL REGRESSION  - NON OUTLIERS --------------#
data_no_smoker_no_outliers <- data %>%
group_by(smoker_yes) %>%
filter(!(smoker_yes == 0 & variavel_de_interesse < quantile(variavel_de_interesse, 0.25) - 1.5 * IQR(variavel_de_interesse) |
variavel_de_interesse > quantile(variavel_de_interesse, 0.75) + 1.5 * IQR(variavel_de_interesse)))
#-------------- SUBNIVEL REGRESSION  - NON OUTLIERS --------------#
data_no_smoker_no_outliers <- data %>%
group_by(smoker_yes) %>%
filter(!(smoker_yes == 0 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
data_smoker_no_obese <- dados %>%
group_by(smoker_yes, obese) %>%
filter(!(smoker_yes == 1 & obese == 0 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
data_smoker_no_obese <- data %>%
group_by(smoker_yes, obese) %>%
filter(!(smoker_yes == 1 & obese == 0 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
data_smoker_obese <- data %>%
group_by(smoker_yes, obese) %>%
filter(!(smoker_yes == 1 & obese == 1 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
#-------------- SUBNIVEL REGRESSION  - NON OUTLIERS --------------#
data_no_smoker_outliers <- data %>%
group_by(smoker_yes) %>%
filter(!(smoker_yes == 0 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
data_smoker_no_obese_outliers <- data %>%
group_by(smoker_yes, obese) %>%
filter(!(smoker_yes == 1 & obese == 0 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
data_smoker_obese_outliers <- data %>%
group_by(smoker_yes, obese) %>%
filter(!(smoker_yes == 1 & obese == 1 & charges < quantile(charges, 0.25) - 1.5 * IQR(charges) |
charges > quantile(charges, 0.75) + 1.5 * IQR(charges)))
dados <- bind_rows(data_no_smoker_outliers, data_smoker_no_obese_outliers, data_smoker_obese_outliers)
#aplly multinível regresson
model <- lmer(charges ~   square_age + (1 | smoker_yes:obese), data = dados)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = dados)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
# Obter os valores preditos
predicted <- predict(model, dados)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(dados$charges, predicted,dados$smoker_yes, dados$obese)
# print(head(data_predicted))
colors <- ifelse(dados$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = dados.charges, y = predicted, color = factor(dados.smoker_yes), shape = factor(dados.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(coef(model))
# Calcular os resíduos
residuos <- residuals(model)
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
ggplot(dados, aes(x = factor(smoker_yes), y = charges)) +
geom_boxplot() +
labs(title = "Boxplot de Charges por Fumantes e Não Fumantes",
x = "Fumante (0 = Não, 1 = Sim)",
y = "Charges") +
scale_fill_manual(values = c("blue", "red")) +  # Escolha cores personalizadas
theme_minimal()
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = dados)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
# Obter os valores preditos
predicted <- predict(model, dados)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(dados$charges, predicted,dados$smoker_yes, dados$obese)
# print(head(data_predicted))
colors <- ifelse(dados$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = dados.charges, y = predicted, color = factor(dados.smoker_yes), shape = factor(dados.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(coef(model))
# Calcular os resíduos
residuos <- residuals(model)
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
ggplot(dados, aes(x = factor(smoker_yes), y = charges)) +
geom_boxplot() +
labs(title = "Boxplot de Charges por Fumantes e Não Fumantes",
x = "Fumante (0 = Não, 1 = Sim)",
y = "Charges") +
scale_fill_manual(values = c("blue", "red")) +  # Escolha cores personalizadas
theme_minimal()
remove_outliers <- function(df, group_var, value_var) {
df %>%
group_by({{group_var}}) %>%
mutate(
q1 = quantile({{value_var}}, 0.25),
q3 = quantile({{value_var}}, 0.75),
iqr = q3 - q1,
lower_limit = q1 - 1.5 * iqr,
upper_limit = q3 + 1.5 * iqr
) %>%
filter({{value_var}} >= lower_limit & {{value_var}} <= upper_limit) %>%
ungroup()
}
# Aplicar a função para remover outliers no grupo de não fumantes
dados <- remove_outliers(data, smoker_yes, charges)
ggplot(dados, aes(x = factor(smoker_yes), y = charges)) +
geom_boxplot() +
labs(title = "Boxplot de Charges por Fumantes e Não Fumantes",
x = "Fumante (0 = Não, 1 = Sim)",
y = "Charges") +
scale_fill_manual(values = c("blue", "red")) +  # Escolha cores personalizadas
theme_minimal()
