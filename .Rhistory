}
# Dividir o dataset em grupos e remover outliers em cada grupo
groups <- interaction(data$smoker_yes, data$obese)
data_clean <- data.frame()
for (group in unique(groups)) {
subset_data <- data[groups == group, ]
subset_data$value <- remove_outliers(subset_data$value)
data_clean <- rbind(data_clean, subset_data[, c("smoker_yes", "obese", "value")])
}
# Verificar o dataset limpo
head(data_clean)
# Carregar os dados
data <- read.csv("insurance.csv")
print(head(data))
#-------------- TRANSFORM DATA --------------#
# Transform sex in binary
data$sex_male <- as.numeric(data$sex == "male")
data <- data[, -which(names(data) == "sex")] #remover coluna categórica
#Transform smoker in binary
data$smoker_yes <- as.numeric(data$smoker == "yes")
data <- data[, -which(names(data) == "smoker")] #remove coluna categórica
# Transformar a coluna 'region' em quatro colunas
region_dummies <- model.matrix(~region - 1, data = data)
colnames(region_dummies) <- c("northeast", "northwest", "southeast", "southwest")
data <- cbind(data, region_dummies)
data <- data[, -which(names(data) == "region")]#remover categórica
#  Add colunm binary for imc>30
data$obese <- ifelse(data$bmi >= 30, 1, 0)
#add colunm square_age
data$square_age <- (data$age)**2
data <- data[, -which(names(data) == "age")]#remover age
print(head(data))
# Função para remover outliers usando o método IQR
remove_outliers <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5 * iqr
upper <- q3 + 1.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
groups <- interaction(data$smoker_yes, data$obese)
data_clean <- data.frame()
for (group in unique(groups)) {
subset_data <- data[groups == group, ]
subset_data$value <- remove_outliers(subset_data$value)
data_clean <- rbind(data_clean, subset_data[, c("smoker_yes", "obese", "value")])
}
# Verificar o dataset limpo
head(data_clean)
# Função para remover outliers usando o método IQR
remove_outliers <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5 * iqr
upper <- q3 + 1.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
groups <- interaction(data$smoker_yes, data$obese)
data_clean <- data.frame()
for (group in unique(groups)) {
subset_data <- data[groups == group, ]
subset_data$value <- remove_outliers(subset_data$value)
data_clean <- rbind(data_clean, subset_data)
}
# Verificar o dataset limpo
head(data_clean)
# data <- data[, -which(names(data) == "age")]#remover age
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data_clean)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
bic_value <- BIC(model)
print(paste("BIC:", bic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
print(confint(model))
# Obter os valores preditos
predicted <- predict(model, data_clean)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(data_clean$charges, predicted,data_clean$smoker_yes, data_clean$obese)
# print(head(data_predicted))
colors <- ifelse(data_clean$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data_clean.charges, y = predicted, color = factor(data_clean.smoker_yes), shape = factor(data_clean.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcular os resíduos
residuos <- residuals(model)
upper <- q3 + 1 * iqr
# Função para remover outliers usando o método IQR
remove_outliers <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1 * iqr
upper <- q3 + 1 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
groups <- interaction(data$smoker_yes, data$obese)
data_clean <- data.frame()
for (group in unique(groups)) {
subset_data <- data[groups == group, ]
subset_data$value <- remove_outliers(subset_data$value)
data_clean <- rbind(data_clean, subset_data)
}
# Verificar o dataset limpo
head(data_clean)
# data <- data[, -which(names(data) == "age")]#remover age
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data_clean)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
bic_value <- BIC(model)
print(paste("BIC:", bic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
print(confint(model))
# Obter os valores preditos
predicted <- predict(model, data_clean)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(data_clean$charges, predicted,data_clean$smoker_yes, data_clean$obese)
# print(head(data_predicted))
colors <- ifelse(data_clean$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data_clean.charges, y = predicted, color = factor(data_clean.smoker_yes), shape = factor(data_clean.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcular os resíduos
residuos <- residuals(model)
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
dotplot(ranef(model))
upper <- q3 + 0.5 * iqr
remove_outliers
remove_outliers
# Função para remover outliers usando o método IQR
remove_outliers <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 0.5 * iqr
upper <- q3 + 0.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
groups <- interaction(data$smoker_yes, data$obese)
data_clean <- data.frame()
for (group in unique(groups)) {
subset_data <- data[groups == group, ]
subset_data$value <- remove_outliers(subset_data$value)
data_clean <- rbind(data_clean, subset_data)
}
# Verificar o dataset limpo
head(data_clean)
# data <- data[, -which(names(data) == "age")]#remover age
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data_clean)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
bic_value <- BIC(model)
print(paste("BIC:", bic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
print(confint(model))
# Obter os valores preditos
predicted <- predict(model, data_clean)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(data_clean$charges, predicted,data_clean$smoker_yes, data_clean$obese)
# print(head(data_predicted))
colors <- ifelse(data_clean$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data_clean.charges, y = predicted, color = factor(data_clean.smoker_yes), shape = factor(data_clean.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Calcular os resíduos
residuos <- residuals(model)
# Plotar os resíduos
hist(residuos, main = "Histograma dos Resíduos", xlab = "Resíduos", col = "skyblue")
dotplot(ranef(model))
# Função para remover outliers usando o método IQR
remove_outliers <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 0.25 * iqr
upper <- q3 + 0.25 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
groups <- interaction(data$smoker_yes, data$obese)
data_clean <- data.frame()
for (group in unique(groups)) {
subset_data <- data[groups == group, ]
subset_data$value <- remove_outliers(subset_data$value)
data_clean <- rbind(data_clean, subset_data)
}
# Verificar o dataset limpo
head(data_clean)
# data <- data[, -which(names(data) == "age")]#remover age
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data_clean)
summary_model <- summary(model)
print(summary_model)
#saveRDS(model, file = "model.rds")
#capture.output(summary_model, file = "model_summary.txt")
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
bic_value <- BIC(model)
print(paste("BIC:", bic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
#write(paste("AIC:", aic_value, "\nR²:", r2_value), file = "model_metrics.txt")
print(confint(model))
# Obter os valores preditos
predicted <- predict(model, data_clean)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(data_clean$charges, predicted,data_clean$smoker_yes, data_clean$obese)
# print(head(data_predicted))
colors <- ifelse(data_clean$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data_clean.charges, y = predicted, color = factor(data_clean.smoker_yes), shape = factor(data_clean.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Função para remover outliers usando o método IQR dentro de cada grupo
remove_outliers_within_group <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5 * iqr
upper <- q3 + 1.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
data_clean <- data.frame()
# Iterar sobre cada combinação única de smoker_yes e obese
for (smoker_val in unique(data$smoker_yes)) {
for (obese_val in unique(data$obese)) {
subset_data <- data[data$smoker_yes == smoker_val & data$obese == obese_val, ]
subset_data$value <- remove_outliers_within_group(subset_data$value)
data_clean <- rbind(data_clean, subset_data)
}
}
# Verificar o dataset limpo
head(data_clean)
# data <- data[, -which(names(data) == "age")]#remover age
#aplly multinível regresson
model <- lmer(charges ~   square_age + bmi + children + sex_male+ northeast+ northwest + southeast +southwest   + (1 | smoker_yes:obese), data = data_clean)
summary_model <- summary(model)
print(summary_model)
aic_value <- AIC(model)
print(paste("AIC:", aic_value))
bic_value <- BIC(model)
print(paste("BIC:", bic_value))
r2_value <- r2(model)
print(paste("R²:", r2_value[[1]]))
print(confint(model))
# Obter os valores preditos
predicted <- predict(model, data_clean)
# Definir cores
#colors <- ifelse(data$smoker_yes == 0, "blue",
#                 ifelse(data$obese == 1, "pink", "red"))
data_predicted <- data.frame(data_clean$charges, predicted,data_clean$smoker_yes, data_clean$obese)
# print(head(data_predicted))
colors <- ifelse(data_clean$obese == 0, "blue", "red")
# Gráfico ggplot com adição da linha y = x e legenda
# Gráfico ggplot com adição da linha y = x e legenda
ggplot(data_predicted, aes(x = data_clean.charges, y = predicted, color = factor(data_clean.smoker_yes), shape = factor(data_clean.obese))) +
geom_point(size = 3) +  # Adiciona pontos ao gráfico
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "gray") +  # Adiciona a linha y = x
labs(title = "Idade vs Custos por Status de Fumante e Obesidade",
x = "Valor real",
y = "Valor predito",
color = "Fumante",
shape = "Obesidade") +
scale_color_manual(values = c("blue", "red"), labels = c("Não Fumante", "Fumante")) +  # Define cores e rótulos para fumantes
scale_shape_manual(values = c(1, 16), labels = c("Não Obeso", "Obeso")) +  # Define formas e rótulos invertidos para obesidade
guides(color = guide_legend(title = "Status de Fumante", override.aes = list(shape = c(15, 15))),
shape = guide_legend(title = "Obesidade", override.aes = list(color = "black", linetype = "dashed"))) +  # Ajusta a legenda de cores com um título personalizado e formas
annotate("text", x = 60000, y = 52000, label = "Reta x=y", color = "gray", hjust = 1.1, vjust = 1.1) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Verificar o dataset limpo
head(data_clean)
# Função para remover outliers usando o método IQR dentro de cada grupo
remove_outliers_within_group <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5 * iqr
upper <- q3 + 1.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Função para remover outliers usando o método IQR dentro de cada grupo
remove_outliers_within_group <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5 * iqr
upper <- q3 + 1.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
data_clean <- data.frame()
for (smoker_val in unique(data$smoker_yes)) {
for (obese_val in unique(data$obese)) {
subset_data <- data[data$smoker_yes == smoker_val & data$obese == obese_val, ]
for (col in c("charges", "square_age", "bmi", "children")) {
subset_data[[col]] <- remove_outliers_within_group(subset_data[[col]])
}
data_clean <- rbind(data_clean, subset_data)
}
}
# Função para remover outliers usando o método IQR dentro de cada grupo
remove_outliers_within_group <- function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
lower <- q1 - 1.5 * iqr
upper <- q3 + 1.5 * iqr
x_filtered <- x[x >= lower & x <= upper]
return(x_filtered)
}
# Dividir o dataset em grupos e remover outliers em cada grupo
data_clean <- data.frame()
# Iterar sobre cada combinação única de smoker_yes e obese
for (smoker_val in unique(data$smoker_yes)) {
for (obese_val in unique(data$obese)) {
subset_data <- data[data$smoker_yes == smoker_val & data$obese == obese_val, ]
for (col in c("charges", "square_age", "bmi", "children")) {
subset_data[[col]] <- remove_outliers_within_group(subset_data[[col]])
}
# Atualizar data_clean usando subset(), garantindo o mesmo número de linhas
data_clean <- rbind(data_clean, subset_data)
}
}
remove_outliers <- function(df) {
Q1 <- quantile(df$charges, 0.25)
Q3 <- quantile(df$charges, 0.75)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
df <- df[df$charges >= lower_bound & df$charges <= upper_bound, ]
return(df)
}
# Aplicar a função de remoção de outliers dentro de cada grupo
cleaned_data <- data %>%
group_by(smoker_yes, obese) %>%
nest() %>%
mutate(data = map(data, remove_outliers)) %>%
unnest(data)
# Exibir o resultado
print(cleaned_data)
library(tidyr)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
# Instale o lattice, se ainda não estiver instalado
install.packages(tidyr)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
# Instale o lattice, se ainda não estiver instalado
install.packages("tidyr")
library(dplyr)
# Carregue o lattice antes dos outros pacotes
library(lattice)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(lme4)
library(performance)
library(viridis)
library(ggcorrplot)
library(gridExtra)
library(dplyr)
library(tidyr)
# Carregue o lattice antes dos outros pacotes
library(lattice)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(lme4)
library(performance)
library(viridis)
library(ggcorrplot)
library(gridExtra)
library(dplyr)
library(tidyr)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
# Instale o lattice, se ainda não estiver instalado
install.packages("cli")
install.packages("cli")
install.packages("cli")
rm(list = ls())
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
# Instale o lattice, se ainda não estiver instalado
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(lattice)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(lme4)
library(performance)
library(viridis)
library(ggcorrplot)
library(gridExtra)
library(dplyr)
library(tidyr)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
# Instale o lattice, se ainda não estiver instalado
# Carregue o lattice antes dos outros pacotes
update.packages(ask = FALSE)
# Instale e carregue os pacotes necessários
# Assumindo que os pacotes já estão instalados
# Instale o lattice, se ainda não estiver instalado
# Carregue o lattice antes dos outros pacotes
install.packages("tidyr", dependencies = TRUE)
library(lattice)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(lme4)
library(performance)
library(viridis)
library(ggcorrplot)
library(gridExtra)
library(dplyr)
library(tidyr)
version
